openapi: 3.0.1
info:
  title: Swo.Platform API
  version: '1.0'
paths:
  /v1/accounts/accounts:
    post:
      tags:
        - Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AccountCreateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccountCreateQueryModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Accounts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModelListResponse'
  /v1/accounts/accounts/{id}/enable:
    post:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}/disable:
    post:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}/activate:
    post:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountActivateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AccountActivateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccountActivateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}:
    put:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccountUpdateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}/validate:
    post:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}/external-buyers:
    post:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccountValidateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalBuyerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/accounts/{id}/icon:
    get:
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users:
    post:
      tags:
        - AccountUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateAccountUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateAccountUserDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - AccountUsers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModelListResponse'
  /v1/accounts/account-users/{id}/groups:
    post:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UserGroupDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserGroupDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserGroupDto'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserGroupDto'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserGroupDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users/{id}/groups/{userGroupId}:
    delete:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users/{id}/accept-invite:
    post:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users/{id}/resend-invite:
    post:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users/{id}/send-new-invite:
    post:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/account-users/{id}:
    delete:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - AccountUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUserQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/agreements:
    post:
      tags:
        - Agreements
      summary: Creates a new agreement.
      requestBody:
        description: Details of the agreement to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agreement'
          text/json:
            schema:
              $ref: '#/components/schemas/Agreement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Agreement'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Agreements
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementListResponse'
  /v1/commerce/agreements/{id}:
    put:
      tags:
        - Agreements
      summary: Updates an existing agreement
      parameters:
        - name: id
          in: path
          description: Id of existing agreement to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agreement'
          text/json:
            schema:
              $ref: '#/components/schemas/Agreement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Agreement'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Agreements
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/agreements/{id}/template:
    get:
      tags:
        - Agreements
      summary: Renders agreement template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/agreements/{agreementId}/attachments:
    get:
      tags:
        - AgreementsAttachments
      parameters:
        - name: agreementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementAttachmentEntityListResponse'
    post:
      tags:
        - AgreementsAttachments
      parameters:
        - name: agreementId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                OrderId:
                  type: string
                Type:
                  $ref: '#/components/schemas/AttachmentType'
                LicenseKey:
                  type: string
                File:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              Description:
                style: form
              OrderId:
                style: form
              Type:
                style: form
              LicenseKey:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementAttachmentEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/agreements/{agreementId}/attachments/{id}:
    get:
      tags:
        - AgreementsAttachments
      parameters:
        - name: agreementId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementAttachmentEntity'
        '301':
          description: Redirect
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - AgreementsAttachments
      parameters:
        - name: agreementId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementAttachmentEntity'
          text/json:
            schema:
              $ref: '#/components/schemas/AgreementAttachmentEntity'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AgreementAttachmentEntity'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementAttachmentEntity'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - AgreementsAttachments
      summary: Deletes an individual agreement attachment, specified by attachmentId.
      parameters:
        - name: agreementId
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/api-tokens:
    post:
      tags:
        - ApiTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - ApiTokens
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModelListResponse'
  /v1/accounts/api-tokens/{id}:
    put:
      tags:
        - ApiTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiTokenDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateApiTokenDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateApiTokenDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - ApiTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - ApiTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/api-tokens/{id}/enable:
    post:
      tags:
        - ApiTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/api-tokens/{id}/disable:
    post:
      tags:
        - ApiTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/authorizations:
    post:
      tags:
        - Authorizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorizationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Authorizations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationQueryModelListResponse'
  /v1/authorizations/{id}:
    put:
      tags:
        - Authorizations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthorizationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Authorizations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Authorizations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/buyers:
    post:
      tags:
        - Buyers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerCreateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BuyerCreateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BuyerCreateQueryModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Buyers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModelListResponse'
  /v1/accounts/buyers/{id}/enable:
    post:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/buyers/{id}/disable:
    post:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/buyers/{id}:
    delete:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerUpdateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BuyerUpdateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BuyerUpdateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/buyers/{id}/validate:
    post:
      tags:
        - Buyers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerValidateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BuyerValidateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BuyerValidateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerValidateQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/documents:
    get:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentQueryModelListResponse'
    post:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                Language:
                  type: string
                DocumentType:
                  $ref: '#/components/schemas/DocumentType'
                Url:
                  type: string
                DisplayOrder:
                  type: integer
                  format: int32
                File:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              Description:
                style: form
              Language:
                style: form
              DocumentType:
                style: form
              Url:
                style: form
              DisplayOrder:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/documents/{id}:
    get:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentQueryModel'
        '301':
          description: Redirect
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    put:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDocumentQueryModel'
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/documents/{id}/review:
    post:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/documents/{id}/publish:
    post:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/documents/{id}/unpublish:
    post:
      tags:
        - Documents
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/item-groups:
    post:
      tags:
        - ItemGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ItemGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGroupQueryModelListResponse'
  /v1/products/{productId}/item-groups/{id}:
    put:
      tags:
        - ItemGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemGroupRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateItemGroupRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateItemGroupRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - ItemGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ItemGroups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGroupQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/licensees:
    post:
      tags:
        - Licensees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseeCreateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LicenseeCreateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LicenseeCreateQueryModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Licensees
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModelListResponse'
  /v1/accounts/licensees/{id}:
    put:
      tags:
        - Licensees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseeUpdateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LicenseeUpdateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LicenseeUpdateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Licensees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Licensees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/licensees/{id}/enable:
    post:
      tags:
        - Licensees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/licensees/{id}/disable:
    post:
      tags:
        - Licensees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseeQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/listings:
    post:
      tags:
        - Listing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListingRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Listing
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingEntityListResponse'
  /v1/listings/{id}:
    put:
      tags:
        - Listing
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingUpdateModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Listing
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Listing
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/modules:
    get:
      tags:
        - Modules
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleQueryModelListResponse'
  /v1/accounts/modules/{id}:
    get:
      tags:
        - Modules
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/orders:
    post:
      tags:
        - Orders
      summary: >-
        Creates a new order for the agreement specified in order body, or
        simultaneously creates and agreement in case of purchase order.
      requestBody:
        description: Details of the order to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Orders
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
  /v1/commerce/orders/{id}:
    put:
      tags:
        - Orders
      summary: >-
        Updates order. Not every property can be updated. For example it's
        impossible to change state of the order, or assign it to another
        agreement.
      parameters:
        - name: id
          in: path
          description: Id of order to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Orders
      summary: Deletes order. Only applicable to draft orders.
      parameters:
        - name: id
          in: path
          description: Id of order to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/orders/{id}/process:
    post:
      tags:
        - Orders
      summary: Places order, changing its status to processing.
      parameters:
        - name: id
          in: path
          description: Id of order to be processed
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/orders/{id}/query:
    post:
      tags:
        - Orders
      summary: >-
        Sets order status to querying, effectively returning it back to client
        for update.
      parameters:
        - name: id
          in: path
          description: Id of order to be queried
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/orders/{id}/complete:
    post:
      tags:
        - Orders
      summary: >-
        Completes the order. As result order gets status completed and agreement
        gets updated with order information.
      parameters:
        - name: id
          in: path
          description: Id of order to be completed
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/orders/{id}/fail:
    post:
      tags:
        - Orders
      summary: >-
        Fails the order. Status changes to failed. State of the agreement
        doesn't change except the status.
      parameters:
        - name: id
          in: path
          description: Id of order to be failed
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/orders/{id}/validate:
    post:
      tags:
        - Orders
      summary: >-
        Validates order state. Internally calls validate endpoint of a
        connector.
      parameters:
        - name: id
          in: path
          description: Id of order to be completed
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/orders/{id}/template:
    get:
      tags:
        - Orders
      summary: Renders order template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/orders/{orderId}/subscriptions:
    get:
      tags:
        - OrderSubscriptions
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSubscriptionListResponse'
    post:
      tags:
        - OrderSubscriptions
      summary: Creates a new subscription for the order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Details of the subscription to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
          text/json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/orders/{orderId}/subscriptions/{id}:
    get:
      tags:
        - OrderSubscriptions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSubscription'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - OrderSubscriptions
      summary: Updates and existing subscription
      parameters:
        - name: id
          in: path
          description: Id of the subscription to update
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update details of subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
          text/json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OrderSubscription'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - OrderSubscriptions
      summary: Deletes subscription.
      parameters:
        - name: id
          in: path
          description: Id of subscription to be deleted
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/parameter-groups:
    post:
      tags:
        - ParameterGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParameterGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ParameterGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterGroupQueryModelListResponse'
  /v1/products/{productId}/parameter-groups/{id}:
    put:
      tags:
        - ParameterGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParameterGroupRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - ParameterGroups
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ParameterGroups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterGroupQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/parameters:
    post:
      tags:
        - Parameters
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParameterDefinitionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterDefinitionQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Parameters
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterDefinitionQueryModelListResponse'
  /v1/products/{productId}/parameters/{id}:
    put:
      tags:
        - Parameters
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParameterDefinitionRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterDefinitionQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Parameters
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Parameters
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterDefinitionQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/price-lists:
    post:
      tags:
        - PriceLists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePriceListRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - PriceLists
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntityListResponse'
  /v1/price-lists/{id}:
    put:
      tags:
        - PriceLists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePriceListRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - PriceLists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/price-lists/{priceListId}/items/{id}:
    put:
      tags:
        - PriceListsItems
      parameters:
        - name: priceListId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePriceListItemRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListItemEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - PriceListsItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: priceListId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListItemEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/price-lists/{priceListId}/items:
    get:
      tags:
        - PriceListsItems
      parameters:
        - name: priceListId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceListItemEntityListResponse'
  /v1/items:
    post:
      tags:
        - ProductItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductItemRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ProductItems
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntityListResponse'
  /v1/product-items:
    post:
      tags:
        - ProductItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductItemRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ProductItems
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntityListResponse'
  /v1/items/{id}:
    delete:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    put:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductItemRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/product-items/{id}:
    delete:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    put:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductItemRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItemEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/items/{id}/review:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/product-items/{id}/review:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/items/{id}/publish:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/product-items/{id}/publish:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/items/{id}/unpublish:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/product-items/{id}/unpublish:
    post:
      tags:
        - ProductItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/media:
    get:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMediaQueryModelListResponse'
    post:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                MediaType:
                  $ref: '#/components/schemas/MediaType'
                Url:
                  type: string
                DisplayOrder:
                  type: integer
                  format: int32
                File:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              Description:
                style: form
              MediaType:
                style: form
              Url:
                style: form
              DisplayOrder:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/media/{id}:
    get:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMediaQueryModel'
        '301':
          description: Redirect
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    put:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMediaQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProductMediaQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProductMediaQueryModel'
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/media/{id}/review:
    post:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/media/{id}/publish:
    post:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/media/{id}/unpublish:
    post:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/media/{id}/image:
    get:
      tags:
        - ProductMedia
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products:
    post:
      tags:
        - Products
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                ShortDescription:
                  type: string
                LongDescription:
                  type: string
                Website:
                  type: string
                Icon:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              ShortDescription:
                style: form
              LongDescription:
                style: form
              Website:
                style: form
              Icon:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Products
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductQueryModelListResponse'
  /v1/products/{id}:
    put:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                ShortDescription:
                  type: string
                LongDescription:
                  type: string
                ExternalIds.Operations:
                  type: string
                Website:
                  type: string
                Icon:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              ShortDescription:
                style: form
              LongDescription:
                style: form
              ExternalIds.Operations:
                style: form
              Website:
                style: form
              Icon:
                style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{id}/settings:
    put:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureSettingsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{id}/review:
    post:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{id}/publish:
    post:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{id}/unpublish:
    post:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{id}/icon:
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/commerce/requests/{requestId}/attachments:
    get:
      tags:
        - RequestAttachments
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentListResponse'
    post:
      tags:
        - RequestAttachments
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                File:
                  type: string
                  format: binary
            encoding:
              Name:
                style: form
              Description:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{requestId}/attachments/{id}:
    get:
      tags:
        - RequestAttachments
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '301':
          description: Redirect
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - RequestAttachments
      summary: Deletes an individual request attachment, specified by attachmentId.
      parameters:
        - name: requestId
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - RequestAttachments
      summary: Updates an individual request attachment, specified by attachmentId.
      parameters:
        - name: requestId
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Request attachment id
          required: true
          schema:
            type: string
      requestBody:
        description: Request attachment model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          text/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Attachment'
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests:
    post:
      tags:
        - Requests
      summary: Creates a new request.
      requestBody:
        description: Request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Requests
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueryModelListResponse'
  /v1/commerce/requests/{id}:
    put:
      tags:
        - Requests
      summary: Updates request. Not every property is updatable.
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      requestBody:
        description: Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{id}/validate:
    post:
      tags:
        - Requests
      summary: >-
        Validates the request, and returns any error information at both request
        parameter and request level.
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validate'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{id}/process:
    post:
      tags:
        - Requests
      summary: Updates the status to processing.
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      requestBody:
        description: Process request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Process'
          text/json:
            schema:
              $ref: '#/components/schemas/Process'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Process'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{id}/query:
    post:
      tags:
        - Requests
      summary: Updates the status to querying.
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      requestBody:
        description: Query request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
          text/json:
            schema:
              $ref: '#/components/schemas/Query'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{id}/complete:
    post:
      tags:
        - Requests
      summary: Updates the status to complete.
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      requestBody:
        description: Complete request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Complete'
          text/json:
            schema:
              $ref: '#/components/schemas/Complete'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Complete'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{id}/template:
    get:
      tags:
        - Requests
      summary: Renders a request template
      parameters:
        - name: id
          in: path
          description: Request id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/requests/{requestId}/messages:
    post:
      tags:
        - RequestsMessages
      summary: Creates a new request message.
      parameters:
        - name: requestId
          in: path
          description: Request Id
          required: true
          schema:
            type: string
      requestBody:
        description: Create message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessageQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - RequestsMessages
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessageQueryModelListResponse'
  /v1/commerce/requests/{requestId}/messages/{id}:
    get:
      tags:
        - RequestsMessages
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessageQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/sellers:
    post:
      tags:
        - Sellers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerCreateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SellerCreateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SellerCreateQueryModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Sellers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModelListResponse'
  /v1/accounts/sellers/{id}/activate:
    post:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/sellers/{id}/deactivate:
    post:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/sellers/{id}/disable:
    post:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/sellers/{id}:
    put:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerUpdateQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SellerUpdateQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SellerUpdateQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Sellers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellerQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/subscriptions:
    post:
      tags:
        - Subscriptions
      summary: Creates a new subscription.
      requestBody:
        description: Details of the subscription to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          text/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Subscriptions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionListResponse'
  /v1/commerce/subscriptions/{id}:
    put:
      tags:
        - Subscriptions
      summary: Updates existing subscription
      parameters:
        - name: id
          in: path
          description: Id of existing agreement to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          text/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Subscriptions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/commerce/subscriptions/{id}/terminate:
    post:
      tags:
        - Subscriptions
      summary: Terminates existing subscription
      parameters:
        - name: id
          in: path
          description: Id of existing agreement to terminate
          required: true
          schema:
            type: string
      requestBody:
        description: Update details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          text/json:
            schema:
              $ref: '#/components/schemas/Subscription'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/templates:
    post:
      tags:
        - Templates
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Templates
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateEntityListResponse'
  /v1/products/{productId}/templates/{id}:
    put:
      tags:
        - Templates
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdateModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Templates
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/terms:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTermsAndConditionsRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditions
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntityListResponse'
  /v1/products/{productId}/terms-and-conditions:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTermsAndConditionsRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditions
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntityListResponse'
  /v1/products/{productId}/terms/{id}:
    put:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTermsAndConditionsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/terms-and-conditions/{id}:
    put:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTermsAndConditionsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/terms/{id}/review:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{id}/review:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{id}/publish:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{id}/publish:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{id}/unpublish:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{id}/unpublish:
    post:
      tags:
        - TermsAndConditions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{termsAndConditionsId}/variants:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Type:
                  enum:
                    - Online
                    - File
                  type: string
                AssetUrl:
                  type: string
                LanguageCode:
                  type: string
                Name:
                  type: string
                Description:
                  type: string
                File:
                  type: string
                  format: binary
            encoding:
              Type:
                style: form
              AssetUrl:
                style: form
              LanguageCode:
                style: form
              Name:
                style: form
              Description:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsVariantEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/TermsAndConditionsVariantEntityListResponse
  /v1/products/{productId}/terms-and-conditions/{termsAndConditionsId}/variants:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Type:
                  enum:
                    - Online
                    - File
                  type: string
                AssetUrl:
                  type: string
                LanguageCode:
                  type: string
                Name:
                  type: string
                Description:
                  type: string
                File:
                  type: string
                  format: binary
            encoding:
              Type:
                style: form
              AssetUrl:
                style: form
              LanguageCode:
                style: form
              Name:
                style: form
              Description:
                style: form
              File:
                style: form
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsVariantEntity'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/TermsAndConditionsVariantEntityListResponse
  /v1/products/{productId}/terms/{termsAndConditionsId}/variants/{id}/review:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{termsAndConditionsId}/variants/{id}/review:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{termsAndConditionsId}/variants/{id}/publish:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{termsAndConditionsId}/variants/{id}/publish:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{termsAndConditionsId}/variants/{id}/unpublish:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms-and-conditions/{termsAndConditionsId}/variants/{id}/unpublish:
    post:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/products/{productId}/terms/{termsAndConditionsId}/variants/{id}:
    delete:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsVariantEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/products/{productId}/terms-and-conditions/{termsAndConditionsId}/variants/{id}:
    delete:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - TermsAndConditionsVariant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: termsAndConditionsId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsVariantEntity'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/units-of-measure:
    post:
      tags:
        - UnitsOfMeasure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnitOfMeasureRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUnitOfMeasureRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUnitOfMeasureRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - UnitsOfMeasure
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureQueryModelListResponse'
  /v1/units-of-measure/{id}:
    put:
      tags:
        - UnitsOfMeasure
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUnitOfMeasureRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUnitOfMeasureRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUnitOfMeasureRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - UnitsOfMeasure
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/user-groups:
    post:
      tags:
        - UserGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserGroupDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUserGroupDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUserGroupDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - UserGroups
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupQueryModelListResponse'
  /v1/accounts/user-groups/{id}:
    put:
      tags:
        - UserGroups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserGroupDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserGroupDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserGroupDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - UserGroups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - UserGroups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/users/{id}/set-password:
    post:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SetPasswordDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SetPasswordDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/users/{id}:
    put:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserQueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserQueryModel'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModel'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/users/{id}/unblock:
    post:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/users/{id}/block:
    post:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/accounts/users/{id}/sso-check:
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
  /v1/accounts/users:
    get:
      tags:
        - Users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQueryModelListResponse'
  /v1/notifications/webhooks:
    get:
      tags:
        - Webhooks
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookListResponse'
    post:
      tags:
        - Webhooks
      summary: Creates a new webhook
      parameters:
        - name: select
          in: query
          description: RQL select statements
          schema:
            type: string
      requestBody:
        description: Details of the webhook to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/notifications/webhooks/{id}:
    get:
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Webhooks
      summary: Updates webhook.
      parameters:
        - name: id
          in: path
          description: Id of webhook to update
          required: true
          schema:
            type: string
        - name: select
          in: query
          description: RQL select statements
          schema:
            type: string
      requestBody:
        description: Update details of webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Webhooks
      summary: Deletes webhook.
      parameters:
        - name: id
          in: path
          description: Id of webhook to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/notifications/webhooks/{id}/enable:
    post:
      tags:
        - Webhooks
      summary: Enables webhook.
      parameters:
        - name: id
          in: path
          description: Id of webhook to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /v1/notifications/webhooks/{id}/disable:
    post:
      tags:
        - Webhooks
      summary: Disables webhook.
      parameters:
        - name: id
          in: path
          description: Id of webhook to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
components:
  schemas:
    AccountActivateQueryModel:
      required:
        - externalId
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          maxLength: 250
          minLength: 1
          type: string
        externalName:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        serviceLevel:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        technicalSupportEmail:
          maxLength: 320
          type: string
          format: email
          nullable: true
        website:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        name:
          maxLength: 500
          minLength: 1
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
          nullable: true
        buyers:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
          nullable: true
      additionalProperties: false
    AccountCreateQueryModel:
      required:
        - name
        - serviceLevel
        - type
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          maxLength: 250
          type: string
          nullable: true
        externalName:
          type: string
          nullable: true
        type:
          minLength: 1
          type: string
        status:
          type: string
          nullable: true
        serviceLevel:
          minLength: 1
          type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        technicalSupportEmail:
          maxLength: 320
          type: string
          format: email
          nullable: true
        website:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        name:
          maxLength: 500
          minLength: 1
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
          nullable: true
        buyers:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
          nullable: true
        logo:
          type: string
          format: binary
          nullable: true
      additionalProperties: false
    AccountDto:
      type: object
      properties:
        id:
          type: string
          allOf:
            - pattern: ^ACC-\d\d\d\d-\d\d\d\d$
            - pattern: ^ACC-\d\d\d\d-\d\d\d\d$
            - pattern: ^ACC-\d\d\d\d-\d\d\d\d$
            - pattern: ^ACC-\d\d\d\d-\d\d\d\d$
      additionalProperties: false
    AccountQueryModel:
      required:
        - name
        - status
        - type
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          maxLength: 250
          type: string
          nullable: true
        externalName:
          type: string
          nullable: true
        type:
          minLength: 1
          type: string
        status:
          minLength: 1
          type: string
        serviceLevel:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        technicalSupportEmail:
          maxLength: 320
          type: string
          format: email
          nullable: true
        website:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        name:
          maxLength: 500
          minLength: 1
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
          nullable: true
        buyers:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
          nullable: true
      additionalProperties: false
    AccountQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountQueryModel'
      additionalProperties: false
    AccountUpdateQueryModel:
      required:
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          maxLength: 250
          type: string
          nullable: true
        externalName:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        serviceLevel:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        technicalSupportEmail:
          maxLength: 320
          type: string
          format: email
          nullable: true
        website:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        name:
          maxLength: 500
          minLength: 1
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
          nullable: true
        buyers:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
          nullable: true
        logo:
          type: string
          format: binary
          nullable: true
      additionalProperties: false
    AccountUserAudit:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/QueryModelEvent'
        updated:
          $ref: '#/components/schemas/QueryModelEvent'
        invitationAcceptedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    AccountUserQueryModel:
      type: object
      properties:
        id:
          type: string
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        user:
          $ref: '#/components/schemas/UserQueryModel'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        invitation:
          $ref: '#/components/schemas/InvitationQueryModel'
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        audit:
          $ref: '#/components/schemas/AccountUserAudit'
      additionalProperties: false
    AccountUserQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountUserQueryModel'
      additionalProperties: false
    AccountValidateQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          type: string
          nullable: true
        externalName:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        serviceLevel:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        technicalSupportEmail:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
          nullable: true
        buyers:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
          nullable: true
      additionalProperties: false
    AddressOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          $ref: '#/components/schemas/DefaultParameterOrigin'
      additionalProperties: false
    AddressParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterInstance'
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
          nullable: true
        city:
          type: string
        state:
          type: string
        postCode:
          type: string
        country:
          type: string
      additionalProperties: false
    AddressQuery:
      required:
        - addressLine1
        - city
        - country
        - postCode
        - state
      type: object
      properties:
        addressLine1:
          maxLength: 250
          minLength: 1
          type: string
        addressLine2:
          maxLength: 250
          type: string
          nullable: true
        postCode:
          maxLength: 20
          minLength: 1
          type: string
        city:
          maxLength: 200
          minLength: 1
          type: string
        state:
          maxLength: 200
          minLength: 1
          type: string
        country:
          maxLength: 2
          minLength: 1
          type: string
      additionalProperties: false
    Agreement:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        icon:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/AgreementStatus'
        listing:
          $ref: '#/components/schemas/ListingEntity'
        authorization:
          $ref: '#/components/schemas/AuthorizationQueryModel'
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
        client:
          $ref: '#/components/schemas/AccountQueryModel'
        price:
          $ref: '#/components/schemas/AgreementSummaryPrice'
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        template:
          $ref: '#/components/schemas/TemplateEntity'
        error:
          $ref: '#/components/schemas/ParametrisedMessage'
        name:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/AgreementLine'
          nullable: true
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
          nullable: true
        parameters:
          $ref: '#/components/schemas/ParameterBag'
        licensee:
          $ref: '#/components/schemas/LicenseeQueryModel'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        termsAndConditions:
          type: array
          items:
            $ref: '#/components/schemas/TermsAndConditionsEntity'
      additionalProperties: false
    AgreementAttachmentEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        type:
          type: string
        description:
          type: string
        filename:
          type: string
          nullable: true
        size:
          type: integer
          format: int32
          nullable: true
        contentType:
          type: string
        orderId:
          type: string
        licenseKey:
          type: string
        agreement:
          $ref: '#/components/schemas/Agreement'
      additionalProperties: false
    AgreementAttachmentEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/AgreementAttachmentEntity'
      additionalProperties: false
    AgreementLine:
      type: object
      properties:
        id:
          type: string
        quantity:
          type: integer
          format: int32
        item:
          $ref: '#/components/schemas/ProductItemEntity'
        price:
          $ref: '#/components/schemas/AgreementLinePrice'
        order:
          $ref: '#/components/schemas/Order'
      additionalProperties: false
    AgreementLinePrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        unitSP:
          type: number
          format: double
          nullable: true
        unitPP:
          type: number
          format: double
          nullable: true
        PPx1:
          type: number
          format: double
          nullable: true
        SPx1:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    AgreementListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Agreement'
      additionalProperties: false
    AgreementStatus:
      enum:
        - New
        - Draft
        - Provisioning
        - Updating
        - Active
        - Terminated
        - Failed
        - Deleted
      type: string
    AgreementSummaryPrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        SPxY:
          type: number
          format: double
          nullable: true
        SPxM:
          type: number
          format: double
          nullable: true
        PPxY:
          type: number
          format: double
          nullable: true
        PPxM:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ApiTokenQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        status:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        lastAccessAt:
          type: string
          format: date-time
          nullable: true
        token:
          type: string
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleQueryModel'
      additionalProperties: false
    ApiTokenQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiTokenQueryModel'
      additionalProperties: false
    Attachment:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        type:
          type: string
        description:
          type: string
        filename:
          type: string
        size:
          type: integer
          format: int32
        contentType:
          type: string
        request:
          $ref: '#/components/schemas/RequestQueryModel'
      additionalProperties: false
    AttachmentListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      additionalProperties: false
    AttachmentType:
      enum:
        - File
        - LicenseKey
      type: string
    AuthorizationExternalIdBag:
      type: object
      properties:
        vendor:
          type: string
          nullable: true
        operations:
          type: string
          nullable: true
      additionalProperties: false
    AuthorizationExternalIdInput:
      type: object
      properties:
        vendor:
          type: string
          nullable: true
        operations:
          type: string
          nullable: true
      additionalProperties: false
    AuthorizationQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        externalIds:
          $ref: '#/components/schemas/AuthorizationExternalIdBag'
        currency:
          type: string
        notes:
          type: string
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
        owner:
          $ref: '#/components/schemas/SellerQueryModel'
        statistics:
          $ref: '#/components/schemas/AuthorizationStatistics'
      additionalProperties: false
    AuthorizationQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationQueryModel'
      additionalProperties: false
    AuthorizationStatistics:
      type: object
      properties:
        subscriptionCount:
          type: integer
          format: int32
        agreementCount:
          type: integer
          format: int32
      additionalProperties: false
    BuyerCreateQueryModel:
      required:
        - account
        - address
        - name
        - sellers
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        externalIds:
          $ref: '#/components/schemas/BuyerExternalIdsQuery'
        status:
          type: string
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        taxId:
          maxLength: 18
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        name:
          maxLength: 500
          minLength: 1
          type: string
        sellers:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
      additionalProperties: false
    BuyerExternalIdsQuery:
      type: object
      properties:
        erpCompanyContact:
          maxLength: 250
          type: string
          nullable: true
        erpCustomer:
          maxLength: 250
          type: string
          nullable: true
      additionalProperties: false
    BuyerQueryModel:
      required:
        - address
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        externalIds:
          $ref: '#/components/schemas/BuyerExternalIdsQuery'
        status:
          type: string
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        taxId:
          maxLength: 18
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        name:
          maxLength: 500
          minLength: 1
          type: string
        sellers:
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
          nullable: true
      additionalProperties: false
    BuyerQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BuyerQueryModel'
      additionalProperties: false
    BuyerUpdateQueryModel:
      required:
        - address
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        externalIds:
          $ref: '#/components/schemas/BuyerExternalIdsQuery'
        status:
          type: string
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        taxId:
          maxLength: 18
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        name:
          maxLength: 500
          minLength: 1
          type: string
        sellers:
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
          nullable: true
      additionalProperties: false
    BuyerValidateQueryModel:
      required:
        - account
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        externalIds:
          $ref: '#/components/schemas/BuyerExternalIdsQuery'
        status:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        taxId:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        name:
          type: string
          nullable: true
        sellers:
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
          nullable: true
      additionalProperties: false
    CheckboxOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: array
          items:
            type: string
        optionsList:
          type: array
          items:
            $ref: '#/components/schemas/SelectionOption'
      additionalProperties: false
    ChoiceOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        optionsList:
          type: array
          items:
            $ref: '#/components/schemas/SelectionOption'
      additionalProperties: false
    CommerceParameter:
      type: object
      properties:
        id:
          type: string
        externalId:
          type: string
          nullable: true
        name:
          type: string
        type:
          $ref: '#/components/schemas/ParameterType'
        phase:
          $ref: '#/components/schemas/ParameterPhase'
        error:
          $ref: '#/components/schemas/ParametrisedMessage'
        constraints:
          $ref: '#/components/schemas/ParameterConstraints'
        displayValue:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    Complete:
      type: object
      properties:
        message:
          type: string
          nullable: true
      additionalProperties: false
    ConfigureSettingsRequest:
      type: object
      properties:
        productOrdering:
          type: boolean
          nullable: true
        productRequests:
          $ref: '#/components/schemas/ProductRequestsInput'
        itemSelection:
          type: boolean
          nullable: true
        orderQueueChanges:
          type: boolean
          nullable: true
        preValidation:
          $ref: '#/components/schemas/PreValidationInput'
      additionalProperties: false
    Constraints:
      type: object
      properties:
        hidden:
          type: boolean
          nullable: true
        unique:
          type: boolean
          nullable: true
        readonly:
          type: boolean
          nullable: true
        optional:
          type: boolean
          nullable: true
      additionalProperties: false
    ContactOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          $ref: '#/components/schemas/DefaultParameterOrigin'
        phoneMandatory:
          type: boolean
      additionalProperties: false
    ContactParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterInstance'
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          $ref: '#/components/schemas/ContactPhoneNumber'
      additionalProperties: false
    ContactPhoneNumber:
      type: object
      properties:
        prefix:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
      additionalProperties: false
    ContactQuery:
      type: object
      properties:
        name:
          type: string
          nullable: true
          readOnly: true
        firstName:
          maxLength: 100
          type: string
          nullable: true
        lastName:
          maxLength: 100
          type: string
          nullable: true
        email:
          maxLength: 320
          type: string
          format: email
          nullable: true
        phone:
          $ref: '#/components/schemas/PhoneNumberQuery'
        user:
          $ref: '#/components/schemas/UserQueryModel'
        type:
          type: string
      additionalProperties: false
    CreateAccountUserDto:
      required:
        - groups
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfileDto'
        account:
          $ref: '#/components/schemas/AccountDto'
        groups:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/UserGroupDto'
        invitation:
          $ref: '#/components/schemas/InvitationDto'
      additionalProperties: false
    CreateApiTokenDto:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountDto'
        name:
          type: string
        icon:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleDto'
          nullable: true
      additionalProperties: false
    CreateAuthorizationRequest:
      required:
        - owner
        - product
      type: object
      properties:
        name:
          type: string
        externalIds:
          $ref: '#/components/schemas/AuthorizationExternalIdInput'
        currency:
          type: string
        notes:
          type: string
          nullable: true
        product:
          $ref: '#/components/schemas/RequestObjectLink'
        owner:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    CreateItemGroupRequest:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        isMultipleChoice:
          type: boolean
        isRequired:
          type: boolean
        isDefault:
          type: boolean
      additionalProperties: false
    CreateListingRequest:
      required:
        - authorization
        - priceList
        - product
        - seller
      type: object
      properties:
        primary:
          type: boolean
        notes:
          type: string
          nullable: true
        product:
          $ref: '#/components/schemas/RequestObjectLink'
        authorization:
          $ref: '#/components/schemas/RequestObjectLink'
        seller:
          $ref: '#/components/schemas/RequestObjectLink'
        priceList:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    CreateMessage:
      required:
        - content
        - visibility
      type: object
      properties:
        visibility:
          $ref: '#/components/schemas/RequestMessageVisibility'
        content:
          minLength: 1
          type: string
      additionalProperties: false
    CreateParameter:
      required:
        - parameterDefinitionId
        - value
      type: object
      properties:
        parameterDefinitionId:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
      additionalProperties: false
    CreateParameterDefinitionRequest:
      required:
        - constraints
        - description
        - displayOrder
        - name
        - phase
        - scope
        - type
      type: object
      properties:
        scope:
          minLength: 1
          enum:
            - Agreement
            - Item
            - Request
            - Subscription
          type: string
        phase:
          minLength: 1
          enum:
            - Configuration
            - Order
            - Fulfillment
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        externalId:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        constraints:
          $ref: '#/components/schemas/ParameterConstraintsInput'
        type:
          minLength: 1
          enum:
            - SingleLineText
            - MultiLineText
            - Address
            - Contact
            - Checkbox
            - Choice
            - Subdomain
            - Heading
            - DropDown
            - Email
            - DataObject
            - Date
          type: string
        options:
          type: object
          oneOf:
            - $ref: '#/components/schemas/AddressOptions'
            - $ref: '#/components/schemas/CheckboxOptions'
            - $ref: '#/components/schemas/ChoiceOptions'
            - $ref: '#/components/schemas/ContactOptions'
            - $ref: '#/components/schemas/DataObjectOptions'
            - $ref: '#/components/schemas/DateOptions'
            - $ref: '#/components/schemas/DropDownOptions'
            - $ref: '#/components/schemas/EmailOptions'
            - $ref: '#/components/schemas/HeadingOptions'
            - $ref: '#/components/schemas/MultiLineTextOptions'
            - $ref: '#/components/schemas/SingleLineTextOptions'
            - $ref: '#/components/schemas/SubdomainOptions'
        group:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    CreateParameterGroupRequest:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        description:
          type: string
        displayOrder:
          type: integer
          format: int32
        isDefault:
          type: boolean
      additionalProperties: false
    CreatePriceListRequest:
      type: object
      properties:
        currency:
          type: string
        precision:
          type: integer
          format: int32
        defaultMarkup:
          type: number
          format: double
          nullable: true
        notes:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/PriceListExternalIdInput'
        product:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    CreateProductItemRequest:
      required:
        - externalIds
        - group
        - terms
        - unit
      type: object
      properties:
        product:
          $ref: '#/components/schemas/RequestObjectLink'
        name:
          type: string
        description:
          type: string
        externalIds:
          $ref: '#/components/schemas/ProductItemExternalIdInput'
        group:
          $ref: '#/components/schemas/RequestObjectLink'
        unit:
          $ref: '#/components/schemas/RequestObjectLink'
        terms:
          $ref: '#/components/schemas/Terms'
        quantityNotApplicable:
          type: boolean
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterValueInput'
          nullable: true
      additionalProperties: false
    CreateRequest:
      required:
        - from
        - name
        - status
        - to
      type: object
      properties:
        externalId:
          maxLength: 250
          type: string
          nullable: true
        name:
          maxLength: 1000
          minLength: 1
          type: string
        status:
          minLength: 1
          type: string
        from:
          $ref: '#/components/schemas/RequestFrom'
        requester:
          $ref: '#/components/schemas/RequestRequester'
        assignee:
          $ref: '#/components/schemas/RequestAssignee'
        to:
          $ref: '#/components/schemas/RequestTo'
        product:
          $ref: '#/components/schemas/RequestProduct'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/CreateParameter'
          nullable: true
      additionalProperties: false
    CreateTemplateRequest:
      required:
        - content
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        type:
          enum:
            - OrderProcessing
            - OrderQuerying
            - OrderCompleted
            - RequestProcessing
          type: string
        default:
          type: boolean
        content:
          minLength: 1
          type: string
      additionalProperties: false
    CreateTermsAndConditionsRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CreateUnitOfMeasureRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      additionalProperties: false
    CreateUserGroupDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        logo:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountDto'
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleDto'
      additionalProperties: false
    CreateWebhookRequest:
      required:
        - url
      type: object
      properties:
        type:
          $ref: '#/components/schemas/WebhookType'
        description:
          type: string
          nullable: true
        url:
          type: string
          format: uri
        criteria:
          type: object
          additionalProperties:
            type: string
          nullable: true
        secret:
          type: string
          nullable: true
      additionalProperties: false
    DataObjectOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        objectType:
          $ref: '#/components/schemas/DataObjectType'
      additionalProperties: false
    DataObjectType:
      enum:
        - Json
        - Xml
      type: string
    DateOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          oneOf:
            - $ref: '#/components/schemas/RangeDateParameter'
            - $ref: '#/components/schemas/SingleDateParameter'
        dateRange:
          type: boolean
        minAvailableDate:
          type: string
          format: date
          nullable: true
        maxAvailableDate:
          type: string
          format: date
          nullable: true
      additionalProperties: false
    DateParameter:
      type: object
      additionalProperties: false
    DefaultParameterEmail:
      enum:
        - None
        - CurrentlySignedInUser
      type: string
    DefaultParameterOrigin:
      enum:
        - None
        - Buyer
        - Seller
        - Licensee
      type: string
    DeltaNode:
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    DisplayOrder:
      type: object
      properties:
        value:
          type: integer
          format: int32
      additionalProperties: false
    Document:
      type: object
      properties:
        domainEvents:
          type: array
          items:
            $ref: '#/components/schemas/DomainEvent'
          readOnly: true
        markedForDelete:
          type: boolean
          readOnly: true
        documentId:
          $ref: '#/components/schemas/DocumentId'
        fileId:
          $ref: '#/components/schemas/FileId'
        url:
          type: string
          readOnly: true
        language:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/State'
        isDeleted:
          type: boolean
          readOnly: true
      additionalProperties: false
    DocumentId:
      type: object
      properties:
        value:
          type: string
          readOnly: true
        postfixNumber:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    DocumentType:
      enum:
        - Online
        - File
      type: string
    DomainEvent:
      type: object
      properties:
        timeStamp:
          type: string
          format: date-time
      additionalProperties: false
    DropDownOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        optionsList:
          type: array
          items:
            $ref: '#/components/schemas/SelectionOption'
      additionalProperties: false
    EmailOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          $ref: '#/components/schemas/DefaultParameterEmail'
        placeholderText:
          type: string
      additionalProperties: false
    ExternalBuyerQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        externalIds:
          $ref: '#/components/schemas/BuyerExternalIdsQuery'
        status:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        taxId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        sellers:
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
      additionalProperties: false
    ExternalIds:
      type: object
      properties:
        client:
          type: string
          nullable: true
        operations:
          type: string
          nullable: true
        vendor:
          type: string
          nullable: true
      additionalProperties: false
    FileId:
      type: object
      properties:
        value:
          type: string
          readOnly: true
      additionalProperties: false
    HeadingOptions:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterTypeOptions'
      additionalProperties: false
    HttpStatusCode:
      enum:
        - Continue
        - SwitchingProtocols
        - Processing
        - EarlyHints
        - OK
        - Created
        - Accepted
        - NonAuthoritativeInformation
        - NoContent
        - ResetContent
        - PartialContent
        - MultiStatus
        - AlreadyReported
        - IMUsed
        - MultipleChoices
        - MovedPermanently
        - Found
        - SeeOther
        - NotModified
        - UseProxy
        - Unused
        - TemporaryRedirect
        - PermanentRedirect
        - BadRequest
        - Unauthorized
        - PaymentRequired
        - Forbidden
        - NotFound
        - MethodNotAllowed
        - NotAcceptable
        - ProxyAuthenticationRequired
        - RequestTimeout
        - Conflict
        - Gone
        - LengthRequired
        - PreconditionFailed
        - RequestEntityTooLarge
        - RequestUriTooLong
        - UnsupportedMediaType
        - RequestedRangeNotSatisfiable
        - ExpectationFailed
        - MisdirectedRequest
        - UnprocessableEntity
        - Locked
        - FailedDependency
        - UpgradeRequired
        - PreconditionRequired
        - TooManyRequests
        - RequestHeaderFieldsTooLarge
        - UnavailableForLegalReasons
        - InternalServerError
        - NotImplemented
        - BadGateway
        - ServiceUnavailable
        - GatewayTimeout
        - HttpVersionNotSupported
        - VariantAlsoNegotiates
        - InsufficientStorage
        - LoopDetected
        - NotExtended
        - NetworkAuthenticationRequired
      type: string
    IdentityQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        icon:
          type: string
          nullable: true
      additionalProperties: false
    InvitationDto:
      type: object
      properties:
        status:
          type: string
      additionalProperties: false
    InvitationQueryModel:
      type: object
      properties:
        url:
          type: string
          nullable: true
        status:
          type: string
      additionalProperties: false
    ItemGroupQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        label:
          type: string
        description:
          type: string
        displayOrder:
          type: integer
          format: int32
        isDefault:
          type: boolean
        isMultipleChoice:
          type: boolean
        isRequired:
          type: boolean
        itemCount:
          type: integer
          format: int32
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    ItemGroupQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ItemGroupQueryModel'
      additionalProperties: false
    LicenseeCreateQueryModel:
      required:
        - buyer
        - seller
        - useBuyerAddress
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        name:
          maxLength: 500
          type: string
          nullable: true
        externalId:
          maxLength: 250
          type: string
          nullable: true
        status:
          type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        useBuyerAddress:
          type: boolean
        icon:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
      additionalProperties: false
    LicenseeQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        name:
          type: string
          nullable: true
        externalId:
          type: string
          nullable: true
        status:
          type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        useBuyerAddress:
          type: boolean
          nullable: true
        icon:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
      additionalProperties: false
    LicenseeQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/LicenseeQueryModel'
      additionalProperties: false
    LicenseeUpdateQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        contact:
          $ref: '#/components/schemas/ContactQuery'
        name:
          maxLength: 500
          type: string
          nullable: true
        externalId:
          maxLength: 250
          type: string
          nullable: true
        status:
          type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        useBuyerAddress:
          type: boolean
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        description:
          maxLength: 2000
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
      additionalProperties: false
    ListMetadata:
      type: object
      properties:
        omitted:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      additionalProperties: false
    ListParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterInstance'
      properties:
        values:
          type: array
          items:
            type: string
      additionalProperties: false
    ListingEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        authorization:
          $ref: '#/components/schemas/AuthorizationQueryModel'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
        priceList:
          $ref: '#/components/schemas/PriceListEntity'
        primary:
          type: boolean
        notes:
          type: string
          nullable: true
        statistics:
          $ref: '#/components/schemas/ListingStatistics'
      additionalProperties: false
    ListingEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ListingEntity'
      additionalProperties: false
    ListingStatistics:
      type: object
      properties:
        subscriptions:
          type: integer
          format: int32
        agreements:
          type: integer
          format: int32
      additionalProperties: false
    ListingUpdateModel:
      type: object
      properties:
        primary:
          type: boolean
        notes:
          type: string
      additionalProperties: false
    Media:
      type: object
      properties:
        domainEvents:
          type: array
          items:
            $ref: '#/components/schemas/DomainEvent'
          readOnly: true
        markedForDelete:
          type: boolean
          readOnly: true
        mediaId:
          $ref: '#/components/schemas/MediaId'
        fileId:
          $ref: '#/components/schemas/FileId'
        url:
          type: string
          readOnly: true
        displayOrder:
          $ref: '#/components/schemas/DisplayOrder'
        status:
          $ref: '#/components/schemas/State'
        isDeleted:
          type: boolean
          readOnly: true
      additionalProperties: false
    MediaId:
      type: object
      properties:
        value:
          type: string
          readOnly: true
        postfixNumber:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    MediaType:
      enum:
        - Video
        - Image
      type: string
    ModuleDto:
      type: object
      properties:
        id:
          type: string
          allOf:
            - pattern: ^MOD-\d\d\d\d$
            - pattern: ^MOD-\d\d\d\d$
            - pattern: ^MOD-\d\d\d\d$
      additionalProperties: false
    ModuleQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        description:
          type: string
        isConfigurable:
          type: boolean
        isEnabledByDefault:
          type: boolean
        name:
          type: string
        accountTypes:
          type: array
          items:
            type: string
      additionalProperties: false
    ModuleQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModuleQueryModel'
      additionalProperties: false
    MultiLineTextOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        placeholderText:
          type: string
        minChar:
          type: integer
          format: int32
          nullable: true
        maxChar:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    Order:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        type:
          $ref: '#/components/schemas/OrderType'
        status:
          $ref: '#/components/schemas/OrderStatus'
        notes:
          type: string
          nullable: true
        statusNotes:
          $ref: '#/components/schemas/ParametrisedMessage'
        template:
          $ref: '#/components/schemas/TemplateEntity'
        listing:
          $ref: '#/components/schemas/ListingEntity'
        authorization:
          $ref: '#/components/schemas/AuthorizationQueryModel'
        agreement:
          $ref: '#/components/schemas/Agreement'
        assignee:
          $ref: '#/components/schemas/UserQueryModel'
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        price:
          $ref: '#/components/schemas/OrderSummaryPrice'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/OrderLine'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/OrderSubscription'
        parameters:
          $ref: '#/components/schemas/ParameterBag'
        error:
          $ref: '#/components/schemas/ParametrisedMessage'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        client:
          $ref: '#/components/schemas/AccountQueryModel'
        licensee:
          $ref: '#/components/schemas/LicenseeQueryModel'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
        termsAndConditions:
          type: array
          items:
            $ref: '#/components/schemas/TermsAndConditionsEntity'
      additionalProperties: false
    OrderLine:
      type: object
      properties:
        id:
          type: string
          nullable: true
        oldQuantity:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        price:
          $ref: '#/components/schemas/OrderLinePrice'
        item:
          $ref: '#/components/schemas/ProductItemEntity'
        subscription:
          $ref: '#/components/schemas/OrderSubscription'
      additionalProperties: false
    OrderLinePrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        unitSP:
          type: number
          format: double
          nullable: true
        unitPP:
          type: number
          format: double
          nullable: true
        PPx1:
          type: number
          format: double
          nullable: true
        SPx1:
          type: number
          format: double
          nullable: true
        SPxY:
          type: number
          format: double
          nullable: true
        SPxM:
          type: number
          format: double
          nullable: true
        PPxY:
          type: number
          format: double
          nullable: true
        PPxM:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    OrderListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
      additionalProperties: false
    OrderStatus:
      enum:
        - New
        - Draft
        - Deleted
        - Processing
        - Querying
        - Failed
        - Completed
      type: string
    OrderSubscription:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        startDate:
          type: string
          format: date-time
        terminationDate:
          type: string
          format: date-time
          nullable: true
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        agreement:
          $ref: '#/components/schemas/Agreement'
        terms:
          $ref: '#/components/schemas/TermsEntity'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        status:
          $ref: '#/components/schemas/OrderSubscriptionStatus'
        commitmentDate:
          type: string
          format: date-time
          nullable: true
        parameters:
          $ref: '#/components/schemas/SubscriptionParameterBag'
        price:
          $ref: '#/components/schemas/SubscriptionSummaryPrice'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/OrderLine'
          nullable: true
      additionalProperties: false
    OrderSubscriptionListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderSubscription'
      additionalProperties: false
    OrderSubscriptionStatus:
      enum:
        - Draft
        - Active
        - Deleted
        - Updating
        - Terminating
        - Terminated
      type: string
    OrderSummaryPrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        defaultMarkup:
          type: number
          format: double
          nullable: true
        PPx1:
          type: number
          format: double
          nullable: true
        SPx1:
          type: number
          format: double
          nullable: true
        SPxY:
          type: number
          format: double
          nullable: true
        SPxM:
          type: number
          format: double
          nullable: true
        PPxY:
          type: number
          format: double
          nullable: true
        PPxM:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    OrderType:
      enum:
        - Purchase
        - Change
        - Termination
      type: string
    PaginationMetadata:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
      additionalProperties: false
    ParameterBag:
      type: object
      properties:
        ordering:
          type: array
          items:
            $ref: '#/components/schemas/CommerceParameter'
          nullable: true
        fulfillment:
          type: array
          items:
            $ref: '#/components/schemas/CommerceParameter'
          nullable: true
      additionalProperties: false
    ParameterConstraints:
      type: object
      properties:
        required:
          type: boolean
        hidden:
          type: boolean
        unique:
          type: boolean
        readonly:
          type: boolean
      additionalProperties: false
    ParameterConstraintsInput:
      type: object
      properties:
        hidden:
          type: boolean
          nullable: true
        unique:
          type: boolean
          nullable: true
        readonly:
          type: boolean
          nullable: true
        optional:
          type: boolean
          nullable: true
      additionalProperties: false
    ParameterDefinitionQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        group:
          $ref: '#/components/schemas/ParameterGroupQueryModel'
        scope:
          enum:
            - Agreement
            - Item
            - Request
            - Subscription
          type: string
        phase:
          enum:
            - Configuration
            - Order
            - Fulfillment
          type: string
        externalId:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        constraints:
          $ref: '#/components/schemas/Constraints'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        options:
          type: object
          oneOf:
            - $ref: '#/components/schemas/AddressOptions'
            - $ref: '#/components/schemas/CheckboxOptions'
            - $ref: '#/components/schemas/ChoiceOptions'
            - $ref: '#/components/schemas/ContactOptions'
            - $ref: '#/components/schemas/DataObjectOptions'
            - $ref: '#/components/schemas/DateOptions'
            - $ref: '#/components/schemas/DropDownOptions'
            - $ref: '#/components/schemas/EmailOptions'
            - $ref: '#/components/schemas/HeadingOptions'
            - $ref: '#/components/schemas/MultiLineTextOptions'
            - $ref: '#/components/schemas/SingleLineTextOptions'
            - $ref: '#/components/schemas/SubdomainOptions'
          readOnly: true
        type:
          enum:
            - SingleLineText
            - MultiLineText
            - Address
            - Contact
            - Checkbox
            - Choice
            - Subdomain
            - Heading
            - DropDown
            - Email
            - DataObject
            - Date
          type: string
      additionalProperties: false
    ParameterDefinitionQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinitionQueryModel'
      additionalProperties: false
    ParameterGroupQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        label:
          type: string
        description:
          type: string
        displayOrder:
          type: integer
          format: int32
        isDefault:
          type: boolean
        parameterCount:
          type: integer
          format: int32
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    ParameterGroupQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ParameterGroupQueryModel'
      additionalProperties: false
    ParameterInstance:
      type: object
      additionalProperties: false
    ParameterPhase:
      enum:
        - Configuration
        - Order
        - Fulfillment
      type: string
    ParameterType:
      enum:
        - SingleLineText
        - MultiLineText
        - Address
        - Contact
        - Checkbox
        - Choice
        - Subdomain
        - Heading
        - DropDown
        - Email
        - DataObject
        - Date
      type: string
    ParameterTypeOptions:
      type: object
      properties:
        hintText:
          type: string
          readOnly: true
      additionalProperties: false
    ParameterValue:
      type: object
      properties:
        id:
          type: string
        externalId:
          type: string
          nullable: true
        name:
          type: string
        value: {}
        displayValue:
          type: string
      additionalProperties: false
    ParameterValueInput:
      type: object
      properties:
        id:
          type: string
        value:
          nullable: true
      additionalProperties: false
    ParametrisedMessage:
      type: object
      properties:
        id:
          type: string
          nullable: true
        message:
          type: string
        parameters:
          nullable: true
      additionalProperties: false
    PhoneNumberQuery:
      type: object
      properties:
        prefix:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
      additionalProperties: false
    PreValidationInput:
      type: object
      properties:
        purchaseOrderDraft:
          type: boolean
          nullable: true
        purchaseOrderQuerying:
          type: boolean
          nullable: true
        changeOrderDraft:
          type: boolean
          nullable: true
        terminationOrder:
          type: boolean
          nullable: true
        productRequest:
          type: boolean
          nullable: true
      additionalProperties: false
    PreValidationSettings:
      type: object
      properties:
        purchaseOrderDraft:
          type: boolean
        purchaseOrderQuerying:
          type: boolean
        changeOrderDraft:
          type: boolean
        terminationOrder:
          type: boolean
        productRequest:
          type: boolean
      additionalProperties: false
    PriceListEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        currency:
          type: string
        precision:
          type: integer
          format: int32
        defaultMarkup:
          type: number
          format: double
        notes:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/PriceListExternalIdBag'
        statistics:
          $ref: '#/components/schemas/PriceListStatistics'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
      additionalProperties: false
    PriceListEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceListEntity'
      additionalProperties: false
    PriceListExternalIdBag:
      type: object
      properties:
        vendor:
          type: string
          nullable: true
      additionalProperties: false
    PriceListExternalIdInput:
      type: object
      properties:
        vendor:
          type: string
          nullable: true
      additionalProperties: false
    PriceListItemEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        status:
          enum:
            - Draft
            - Private
            - ForSale
          type: string
        unitLP:
          type: number
          format: double
          nullable: true
        unitPP:
          type: number
          format: double
          nullable: true
        markup:
          type: number
          format: double
          nullable: true
        margin:
          type: number
          format: double
          nullable: true
        unitSP:
          type: number
          format: double
          nullable: true
        pPx1:
          type: number
          format: double
          nullable: true
        pPxM:
          type: number
          format: double
          nullable: true
        pPxY:
          type: number
          format: double
          nullable: true
        sPx1:
          type: number
          format: double
          nullable: true
        sPxM:
          type: number
          format: double
          nullable: true
        sPxY:
          type: number
          format: double
          nullable: true
        lPx1:
          type: number
          format: double
          nullable: true
        lPxM:
          type: number
          format: double
          nullable: true
        lPxY:
          type: number
          format: double
          nullable: true
        priceList:
          $ref: '#/components/schemas/PriceListEntity'
        item:
          $ref: '#/components/schemas/ProductItemEntity'
      additionalProperties: false
    PriceListItemEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceListItemEntity'
      additionalProperties: false
    PriceListStatistics:
      type: object
      properties:
        sellers:
          type: integer
          format: int32
        listings:
          type: integer
          format: int32
        priceListItems:
          type: integer
          format: int32
        purchasePriceItems:
          type: integer
          format: int32
        purchasePriceCompleteness:
          type: integer
          format: int32
        salesPriceItems:
          type: integer
          format: int32
        salesPriceCompleteness:
          type: integer
          format: int32
        averageMarkup:
          type: number
          format: double
        averageMargin:
          type: number
          format: double
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    Process:
      type: object
      properties:
        message:
          type: string
          nullable: true
      additionalProperties: false
    ProductDocumentQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        type:
          type: string
        description:
          type: string
        status:
          type: string
        filename:
          type: string
          nullable: true
        size:
          type: integer
          format: int32
          nullable: true
        contentType:
          type: string
        url:
          type: string
          readOnly: true
        language:
          type: string
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    ProductDocumentQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductDocumentQueryModel'
      additionalProperties: false
    ProductExternalIdBag:
      type: object
      properties:
        operations:
          type: string
          nullable: true
      additionalProperties: false
    ProductItemEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        externalIds:
          $ref: '#/components/schemas/ProductItemExternalIdBag'
        group:
          $ref: '#/components/schemas/ItemGroupQueryModel'
        unit:
          $ref: '#/components/schemas/UnitOfMeasureQueryModel'
        terms:
          $ref: '#/components/schemas/TermsEntity'
        quantityNotApplicable:
          type: boolean
        status:
          type: string
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterValue'
      additionalProperties: false
    ProductItemEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductItemEntity'
      additionalProperties: false
    ProductItemExternalIdBag:
      type: object
      properties:
        vendor:
          type: string
        operations:
          type: string
          nullable: true
      additionalProperties: false
    ProductItemExternalIdInput:
      type: object
      properties:
        vendor:
          type: string
          nullable: true
        operations:
          type: string
          nullable: true
      additionalProperties: false
    ProductMediaQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        type:
          type: string
        description:
          type: string
        status:
          type: string
        filename:
          type: string
        size:
          type: integer
          format: int32
        contentType:
          type: string
        displayOrder:
          type: integer
          format: int32
        url:
          type: string
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    ProductMediaQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductMediaQueryModel'
      additionalProperties: false
    ProductQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        shortDescription:
          type: string
          nullable: true
        longDescription:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/ProductExternalIdBag'
        website:
          type: string
        icon:
          $ref: '#/components/schemas/RelativeInternalUrl'
        status:
          type: string
        vendor:
          $ref: '#/components/schemas/AccountQueryModel'
        settings:
          $ref: '#/components/schemas/ProductSettings'
        statistics:
          $ref: '#/components/schemas/ProductStatistics'
      additionalProperties: false
    ProductQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    ProductRequestsInput:
      type: object
      properties:
        enabled:
          type: boolean
        name:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      additionalProperties: false
    ProductRequestsSettingQueryModel:
      type: object
      properties:
        enabled:
          type: boolean
        name:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      additionalProperties: false
    ProductSettings:
      type: object
      properties:
        productOrdering:
          type: boolean
        productRequests:
          $ref: '#/components/schemas/ProductRequestsSettingQueryModel'
        itemSelection:
          type: boolean
        orderQueueChanges:
          type: boolean
        preValidation:
          $ref: '#/components/schemas/PreValidationSettings'
      additionalProperties: false
    ProductStatistics:
      type: object
      properties:
        itemCount:
          type: integer
          format: int32
        ordersPlacedCount:
          type: integer
          format: int32
        agreementCount:
          type: integer
          format: int32
        subscriptionCount:
          type: integer
          format: int32
        requestCount:
          type: integer
          format: int32
      additionalProperties: false
    Query:
      type: object
      properties:
        message:
          type: string
          nullable: true
      additionalProperties: false
    QueryModelAudit:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/QueryModelEvent'
        updated:
          $ref: '#/components/schemas/QueryModelEvent'
      additionalProperties: false
    QueryModelEvent:
      type: object
      properties:
        at:
          type: string
          format: date-time
          nullable: true
        by:
          $ref: '#/components/schemas/IdentityQueryModel'
      additionalProperties: false
    QueryModelMetadata:
      type: object
      properties:
        omitted:
          type: array
          items:
            type: string
      additionalProperties: false
    RangeDateParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/DateParameter'
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
      additionalProperties: false
    RelativeInternalUrl:
      type: object
      properties:
        path:
          type: string
        apiVersion:
          type: string
      additionalProperties: false
    RequestAssignee:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    RequestFrom:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    RequestMessageQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        visibility:
          $ref: '#/components/schemas/RequestMessageVisibilityQuery'
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        type:
          type: string
        content:
          type: string
        request:
          $ref: '#/components/schemas/RequestQueryModel'
      additionalProperties: false
    RequestMessageQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/RequestMessageQueryModel'
      additionalProperties: false
    RequestMessageVisibility:
      type: object
      properties:
        client:
          type: boolean
        operations:
          type: boolean
        vendor:
          type: boolean
      additionalProperties: false
    RequestMessageVisibilityQuery:
      type: object
      properties:
        client:
          type: boolean
        operations:
          type: boolean
        vendor:
          type: boolean
      additionalProperties: false
    RequestObjectLink:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    RequestParameterConstraints:
      type: object
      properties:
        isReadonly:
          type: boolean
          nullable: true
        isOptional:
          type: boolean
          nullable: true
      additionalProperties: false
    RequestParametersQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        externalId:
          type: string
        title:
          type: string
        description:
          type: string
        value:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        constraints:
          $ref: '#/components/schemas/RequestParameterConstraints'
        typeOptions: {}
        errorMessage:
          type: string
          nullable: true
        errorCode:
          type: string
          nullable: true
        request:
          $ref: '#/components/schemas/RequestQueryModel'
      additionalProperties: false
    RequestProduct:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    RequestQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          type: string
          nullable: true
        name:
          type: string
        status:
          type: string
        error:
          type: string
          nullable: true
        from:
          $ref: '#/components/schemas/AccountQueryModel'
        requester:
          $ref: '#/components/schemas/UserQueryModel'
        assignee:
          $ref: '#/components/schemas/UserQueryModel'
        to:
          $ref: '#/components/schemas/AccountQueryModel'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/RequestParametersQueryModel'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/RequestMessageQueryModel'
      additionalProperties: false
    RequestQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/RequestQueryModel'
      additionalProperties: false
    RequestRequester:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    RequestTo:
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    SelectionOption:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
        description:
          type: string
          nullable: true
      additionalProperties: false
    SellerCreateQueryModel:
      required:
        - currencies
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        currencies:
          minItems: 1
          type: array
          items:
            maxLength: 3
            minLength: 1
            type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        name:
          maxLength: 500
          minLength: 1
          type: string
      additionalProperties: false
    SellerQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        currencies:
          type: array
          items:
            type: string
          nullable: true
        address:
          $ref: '#/components/schemas/AddressQuery'
        name:
          type: string
      additionalProperties: false
    SellerQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/SellerQueryModel'
      additionalProperties: false
    SellerUpdateQueryModel:
      required:
        - currencies
        - name
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        externalId:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        icon:
          maxLength: 2000
          type: string
          nullable: true
        currencies:
          minItems: 1
          type: array
          items:
            maxLength: 3
            minLength: 1
            type: string
        address:
          $ref: '#/components/schemas/AddressQuery'
        name:
          maxLength: 500
          minLength: 1
          type: string
      additionalProperties: false
    SetPasswordDto:
      required:
        - password
      type: object
      properties:
        password:
          minLength: 1
          type: string
      additionalProperties: false
    SetPhoneNumberDto:
      type: object
      properties:
        prefix:
          maxLength: 10
          type: string
          nullable: true
        number:
          maxLength: 15
          type: string
          nullable: true
      additionalProperties: false
    SetUserSettingsDto:
      type: object
      properties:
        cultureCode:
          maxLength: 5
          type: string
          nullable: true
        languageCode:
          maxLength: 5
          type: string
          nullable: true
      additionalProperties: false
    SingleDateParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/DateParameter'
      properties:
        date:
          type: string
          format: date
      additionalProperties: false
    SingleLineTextOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        placeholderText:
          type: string
        pattern:
          type: string
          nullable: true
        minChar:
          type: integer
          format: int32
          nullable: true
        maxChar:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    State:
      enum:
        - Draft
        - Pending
        - Published
        - Unpublished
      type: string
    StringDelta:
      type: object
      properties:
        node:
          $ref: '#/components/schemas/DeltaNode'
        path:
          type: string
        data:
          type: string
          nullable: true
          readOnly: true
        isDefined:
          type: boolean
          readOnly: true
      additionalProperties: false
    StringJsonOptional:
      type: object
      properties:
        hasValue:
          type: boolean
          readOnly: true
        value:
          type: string
      additionalProperties: false
    StringStringDictionaryJsonOptional:
      type: object
      properties:
        hasValue:
          type: boolean
          readOnly: true
        value:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
    SubdomainOptions:
      type: object
      properties:
        hintText:
          type: string
        defaultValue:
          type: string
        placeholderText:
          type: string
        domainSuffix:
          type: string
      additionalProperties: false
    Subscription:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        startDate:
          type: string
          format: date-time
        terminationDate:
          type: string
          format: date-time
          nullable: true
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        agreement:
          $ref: '#/components/schemas/Agreement'
        terms:
          $ref: '#/components/schemas/TermsEntity'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        commitmentDate:
          type: string
          format: date-time
        price:
          $ref: '#/components/schemas/SubscriptionSummaryPrice'
        parameters:
          $ref: '#/components/schemas/SubscriptionParameterBag'
        buyer:
          $ref: '#/components/schemas/BuyerQueryModel'
        licensee:
          $ref: '#/components/schemas/LicenseeQueryModel'
        seller:
          $ref: '#/components/schemas/SellerQueryModel'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionLine'
          nullable: true
      additionalProperties: false
    SubscriptionLine:
      type: object
      properties:
        id:
          type: string
        quantity:
          type: integer
          format: int32
        item:
          $ref: '#/components/schemas/ProductItemEntity'
        price:
          $ref: '#/components/schemas/SubscriptionLinePrice'
        subscription:
          $ref: '#/components/schemas/Subscription'
      additionalProperties: false
    SubscriptionLinePrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        unitSP:
          type: number
          format: double
          nullable: true
        unitPP:
          type: number
          format: double
          nullable: true
        SPxY:
          type: number
          format: double
          nullable: true
        SPxM:
          type: number
          format: double
          nullable: true
        PPxY:
          type: number
          format: double
          nullable: true
        PPxM:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    SubscriptionListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
      additionalProperties: false
    SubscriptionParameterBag:
      type: object
      properties:
        fulfillment:
          type: array
          items:
            $ref: '#/components/schemas/CommerceParameter'
          nullable: true
      additionalProperties: false
    SubscriptionStatus:
      enum:
        - Active
        - Updating
        - Terminating
        - Terminated
      type: string
    SubscriptionSummaryPrice:
      type: object
      properties:
        currency:
          type: string
        markup:
          type: number
          format: double
        margin:
          type: number
          format: double
        SPxY:
          type: number
          format: double
          nullable: true
        SPxM:
          type: number
          format: double
          nullable: true
        PPxY:
          type: number
          format: double
          nullable: true
        PPxM:
          type: number
          format: double
          nullable: true
        defaultMarkup:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    TemplateEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        content:
          type: string
        type:
          enum:
            - OrderProcessing
            - OrderQuerying
            - OrderCompleted
            - RequestProcessing
          type: string
        default:
          type: boolean
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    TemplateEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TemplateEntity'
      additionalProperties: false
    TemplateUpdateModel:
      type: object
      properties:
        name:
          type: string
        default:
          type: boolean
        content:
          type: string
      additionalProperties: false
    Terms:
      type: object
      properties:
        period:
          enum:
            - 1m
            - 1y
            - 3y
            - one-time
          type: string
        commitment:
          enum:
            - 1m
            - 1y
            - 3y
          type: string
          nullable: true
      additionalProperties: false
    TermsAndConditionsEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        status:
          type: string
        product:
          $ref: '#/components/schemas/ProductQueryModel'
      additionalProperties: false
    TermsAndConditionsEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TermsAndConditionsEntity'
      additionalProperties: false
    TermsAndConditionsVariantEntity:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        type:
          type: string
        assetUrl:
          type: string
        languageCode:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        filename:
          type: string
          nullable: true
        size:
          type: integer
          format: int32
          nullable: true
        contentType:
          type: string
        termsAndConditions:
          $ref: '#/components/schemas/TermsAndConditionsEntity'
        fileId:
          type: string
      additionalProperties: false
    TermsAndConditionsVariantEntityListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/TermsAndConditionsVariantEntity'
      additionalProperties: false
    TermsEntity:
      type: object
      properties:
        period:
          enum:
            - 1m
            - 1y
            - 3y
            - one-time
          type: string
        commitment:
          enum:
            - 1m
            - 1y
            - 3y
          type: string
          nullable: true
      additionalProperties: false
    TextParameter:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterInstance'
      properties:
        text:
          type: string
      additionalProperties: false
    UnitOfMeasureQueryModel:
      type: object
      properties:
        id:
          type: string
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        description:
          type: string
          nullable: true
        name:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        statistics:
          $ref: '#/components/schemas/UnitOfMeasureStatistics'
      additionalProperties: false
    UnitOfMeasureQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasureQueryModel'
      additionalProperties: false
    UnitOfMeasureStatistics:
      type: object
      properties:
        itemCount:
          type: integer
          format: int32
      additionalProperties: false
    UpdateApiTokenDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleDto'
          nullable: true
      additionalProperties: false
    UpdateAuthorizationRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/AuthorizationExternalIdInput'
        currency:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        product:
          $ref: '#/components/schemas/RequestObjectLink'
        vendor:
          $ref: '#/components/schemas/RequestObjectLink'
        owner:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    UpdateItemGroupRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
          nullable: true
        isMultipleChoice:
          type: boolean
          nullable: true
        isRequired:
          type: boolean
          nullable: true
        isDefault:
          type: boolean
          nullable: true
      additionalProperties: false
    UpdateParameterDefinitionRequest:
      required:
        - constraints
        - description
        - displayOrder
        - name
        - type
      type: object
      properties:
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        externalId:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        constraints:
          $ref: '#/components/schemas/ParameterConstraintsInput'
        type:
          minLength: 1
          enum:
            - SingleLineText
            - MultiLineText
            - Address
            - Contact
            - Checkbox
            - Choice
            - Subdomain
            - Heading
            - DropDown
            - Email
            - DataObject
            - Date
          type: string
        options:
          type: object
          oneOf:
            - $ref: '#/components/schemas/AddressOptions'
            - $ref: '#/components/schemas/CheckboxOptions'
            - $ref: '#/components/schemas/ChoiceOptions'
            - $ref: '#/components/schemas/ContactOptions'
            - $ref: '#/components/schemas/DataObjectOptions'
            - $ref: '#/components/schemas/DateOptions'
            - $ref: '#/components/schemas/DropDownOptions'
            - $ref: '#/components/schemas/EmailOptions'
            - $ref: '#/components/schemas/HeadingOptions'
            - $ref: '#/components/schemas/MultiLineTextOptions'
            - $ref: '#/components/schemas/SingleLineTextOptions'
            - $ref: '#/components/schemas/SubdomainOptions'
        group:
          $ref: '#/components/schemas/RequestObjectLink'
      additionalProperties: false
    UpdateParameterGroupRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
          nullable: true
        isDefault:
          type: boolean
          nullable: true
      additionalProperties: false
    UpdatePriceListItemRequest:
      type: object
      properties:
        status:
          enum:
            - Draft
            - Private
            - ForSale
          type: string
        unitPP:
          type: number
          format: double
        markup:
          type: number
          format: double
          nullable: true
        unitLP:
          type: number
          format: double
      additionalProperties: false
    UpdatePriceListRequest:
      type: object
      properties:
        defaultMarkup:
          type: number
          format: double
          nullable: true
        notes:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/PriceListExternalIdInput'
      additionalProperties: false
    UpdateProductItemRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        externalIds:
          $ref: '#/components/schemas/ProductItemExternalIdInput'
        group:
          $ref: '#/components/schemas/RequestObjectLink'
        unit:
          $ref: '#/components/schemas/RequestObjectLink'
        terms:
          $ref: '#/components/schemas/Terms'
        quantityNotApplicable:
          type: boolean
          nullable: true
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterValueInput'
          nullable: true
      additionalProperties: false
    UpdateRequest:
      type: object
      properties:
        externalId:
          type: string
        name:
          type: string
        assignee:
          $ref: '#/components/schemas/RequestAssignee'
      additionalProperties: false
    UpdateTermsAndConditionsRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    UpdateUnitOfMeasureRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      additionalProperties: false
    UpdateUserGroupDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        logo:
          type: string
          nullable: true
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleDto'
      additionalProperties: false
    UpdateWebhookRequest:
      type: object
      properties:
        webhookId:
          type: string
        description:
          $ref: '#/components/schemas/StringJsonOptional'
        url:
          $ref: '#/components/schemas/UriJsonOptional'
        criteria:
          $ref: '#/components/schemas/StringStringDictionaryJsonOptional'
        secret:
          $ref: '#/components/schemas/StringJsonOptional'
      additionalProperties: false
    UriJsonOptional:
      type: object
      properties:
        hasValue:
          type: boolean
          readOnly: true
        value:
          type: string
          format: uri
      additionalProperties: false
    UserAudit:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/QueryModelEvent'
        updated:
          $ref: '#/components/schemas/QueryModelEvent'
        invitationAcceptedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    UserGroupDto:
      type: object
      properties:
        id:
          type: string
          allOf:
            - pattern: ^UGR-\d\d\d\d-\d\d\d\d$
            - pattern: ^UGR-\d\d\d\d-\d\d\d\d$
      additionalProperties: false
    UserGroupQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleQueryModel'
        logo:
          type: string
          nullable: true
        isDefault:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserQueryModel'
      additionalProperties: false
    UserGroupQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupQueryModel'
      additionalProperties: false
    UserProfileDto:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        email:
          minLength: 1
          type: string
        firstName:
          minLength: 1
          type: string
        lastName:
          minLength: 1
          type: string
        phone:
          $ref: '#/components/schemas/SetPhoneNumberDto'
        icon:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/SetUserSettingsDto'
      additionalProperties: false
    UserQueryModel:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/UserAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        email:
          type: string
        status:
          type: string
        phoneNumber:
          type: string
          nullable: true
          deprecated: true
        phone:
          $ref: '#/components/schemas/PhoneNumberQuery'
        firstName:
          type: string
        lastName:
          type: string
        icon:
          type: string
          nullable: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        settings:
          $ref: '#/components/schemas/UserSettingsQueryModel'
        name:
          type: string
          nullable: true
          readOnly: true
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountQueryModel'
        currentAccount:
          $ref: '#/components/schemas/AccountQueryModel'
      additionalProperties: false
    UserQueryModelListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserQueryModel'
      additionalProperties: false
    UserSettingsQueryModel:
      type: object
      properties:
        cultureCode:
          type: string
          nullable: true
        languageCode:
          type: string
          nullable: true
      additionalProperties: false
    Validate:
      type: object
      properties:
        error:
          type: string
          nullable: true
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ValidateParameter'
      additionalProperties: false
    ValidateParameter:
      type: object
      properties:
        id:
          type: string
        externalId:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        isValid:
          type: boolean
        error:
          type: string
          nullable: true
      additionalProperties: false
    Webhook:
      type: object
      properties:
        id:
          type: string
        audit:
          $ref: '#/components/schemas/QueryModelAudit'
        $meta:
          $ref: '#/components/schemas/QueryModelMetadata'
        href:
          type: string
          readOnly: true
        url:
          type: string
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/WebhookStatus'
        type:
          $ref: '#/components/schemas/WebhookType'
        secret:
          type: string
          nullable: true
        statistics:
          $ref: '#/components/schemas/WebhookStatistics'
        objectType:
          $ref: '#/components/schemas/WebhookObjectType'
        account:
          $ref: '#/components/schemas/AccountQueryModel'
        product:
          $ref: '#/components/schemas/ProductQueryModel'
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/WebhookCriteria'
        lastSuccess:
          $ref: '#/components/schemas/WebhookCall'
        lastFailure:
          $ref: '#/components/schemas/WebhookCall'
        lastCall:
          $ref: '#/components/schemas/WebhookCall'
      additionalProperties: false
    WebhookCall:
      type: object
      properties:
        success:
          type: boolean
        callTime:
          type: string
          format: date-time
        responseTime:
          type: string
          format: date-time
          nullable: true
        headers:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
        response:
          type: string
          nullable: true
        reasonPhrase:
          type: string
          nullable: true
        httpStatusCode:
          $ref: '#/components/schemas/HttpStatusCode'
      additionalProperties: false
    WebhookCriteria:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      additionalProperties: false
    WebhookListResponse:
      type: object
      properties:
        $meta:
          $ref: '#/components/schemas/ListMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      additionalProperties: false
    WebhookObjectType:
      enum:
        - Order
        - Request
        - Account
      type: string
    WebhookStatistics:
      type: object
      properties:
        total:
          type: integer
          format: int32
        successes:
          type: integer
          format: int32
        failures:
          type: integer
          format: int32
        failuresSinceLastSuccess:
          type: integer
          format: int32
      additionalProperties: false
    WebhookStatus:
      enum:
        - Enabled
        - Disabled
      type: string
    WebhookType:
      enum:
        - ValidatePurchaseOrderDraft
        - ValidatePurchaseOrderQuerying
        - ValidateChangeOrderDraft
        - ValidateTerminateOrder
        - ValidateRequest
        - SelectOrderLines
      type: string
